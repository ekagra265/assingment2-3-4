#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
using namespace std;

class Person {
private:
    string name, id, contact;
    int age;
public:
    Person(string n = "", int a = 0, string i = "", string c = "") {
        setName(n);
        setAge(a);
        id = i;
        contact = c;
    }
    virtual ~Person() {}

    void setName(string n) { if (!n.empty()) name = n; }
    void setAge(int a) { if (a > 0 && a < 120) age = a; }
    void setID(string i) { id = i; }
    void setContact(string c) { contact = c; }

    string getName() const { return name; }
    int getAge() const { return age; }
    string getID() const { return id; }
    string getContact() const { return contact; }

    virtual void displayDetails() const {
        cout << "Name: " << name << "\nAge: " << age
             << "\nID: " << id << "\nContact: " << contact << endl;
    }

    virtual float calculatePayment() const { return 0.0f; }
};

class Student : public Person {
private:
    string enrollmentDate, program;
    float gpa;
public:
    Student(string n, int a, string i, string c, string e, string p, float g)
        : Person(n, a, i, c), enrollmentDate(e), program(p) {
        setGPA(g);
    }

    void setGPA(float g) { if (g >= 0.0 && g <= 4.0) gpa = g; }
    float getGPA() const { return gpa; }

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Program: " << program << "\nGPA: " << gpa << endl;
    }

    float calculatePayment() const override { return 18000.0f; }
};

class Professor : public Person {
private:
    string department, specialization, hireDate;
public:
    Professor(string n, int a, string i, string c, string d, string s, string h)
        : Person(n, a, i, c), department(d), specialization(s), hireDate(h) {}

    void displayDetails() const override {
        Person::displayDetails();
        cout << "Department: " << department << "\nSpecialization: " << specialization << endl;
    }

    float calculatePayment() const override { return 45000.0f; }
};

class Course {
private:
    string code, title, description;
    int credits;
public:
    Course(string c, string t, string d, int cr)
        : code(c), title(t), description(d) {
        setCredits(cr);
    }
    void setCredits(int cr) { if (cr > 0) credits = cr; }
};

class Department {
private:
    string name, location;
    double budget;
public:
    Department(string n, string l, double b)
        : name(n), location(l), budget(b) {}
};

class GradeBook {
private:
    map<string, float> grades;
public:
    void addGrade(const string& studentID, float grade) {
        grades[studentID] = grade;
    }

    float calculateAverageGrade() const {
        float total = 0;
        for (const auto& g : grades) total += g.second;
        return grades.empty() ? 0 : total / grades.size();
    }

    vector<string> getFailingStudents() const {
        vector<string> fail;
        for (const auto& g : grades)
            if (g.second < 40) fail.push_back(g.first);
        return fail;
    }
};

class EnrollmentManager {
private:
    map<string, vector<string>> enrollments;
public:
    void enrollStudent(const string& course, const string& studentID) {
        enrollments[course].push_back(studentID);
    }

    void dropStudent(const string& course, const string& studentID) {
        auto& list = enrollments[course];
        list.erase(remove(list.begin(), list.end(), studentID), list.end());
    }

    int getEnrollmentCount(const string& course) const {
        auto it = enrollments.find(course);
        return (it != enrollments.end()) ? it->second.size() : 0;
    }
};

void showDetails(const Person* p) {
    p->displayDetails();
    cout << "Payment: " << p->calculatePayment() << "\n-----------------------------\n";
}

int main() {
    Student stu1("Aarav", 19, "ST101", "99999", "2024-01-01", "IT", 3.5);
    Student stu2("Meera", 20, "ST102", "88888", "2024-01-01", "ME", 3.0);
    Professor prof1("Rajesh", 40, "PF201", "44444", "EE", "Signals", "2012-03-10");
    Professor prof2("Anjali", 48, "PF202", "77777", "CE", "Structures", "2008-06-01");

    vector<Person*> people = { &stu1, &stu2, &prof1, &prof2 };
    for (const auto& person : people) {
        showDetails(person);
    }

    return 0;
}
